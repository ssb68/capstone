version: 2.1

jobs:
  build:
    docker:
      # https://circleci.com/developer/images/image/cimg/python#image-name
      - image: cimg/python:3.10.1
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/repo
    steps:
      - checkout
      # https://circleci.com/docs/2.0/building-docker-images/ 
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #    - v1-dependencies-{{ checksum "requirements.txt" }}
      #    # fallback to using the latest cache if no exact match is found
      #    - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv capstone
            . capstone/bin/activate
            make install
      - save_cache:
          paths:
            - ./capstone
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint
      - run:
          name: run python lint
          command: |
            . capstone/bin/activate
            make lint 
      # run hadolint
      - run:
          name: run hado lint
          command: |
            . capstone/bin/activate
            make hadolint
      # build local image
      - run: 
          name: run docker build
          command: |
            . capstone/bin/activate
            make build-image PROJECT=$CAPSTONE_PROJECT
      # push image to my docker.io repo
      - run: 
          name: run docker push
          command: |
            . capstone/bin/activate
            TAG=0.1.$CIRCLE_BUILD_NUM
            make push-image PROJECT=$CAPSTONE_PROJECT IMAGE_TAG=$TAG USER=$DOCKER_USER PASS=$DOCKER_PASS
  
  createEKScluster: 
    description: create AWS EKS stack using eksctl
    docker:
      - image: cimg/python:3.10.1
    parameters:
      create:
        description: boolean to determine whether this is the initial cluster build
        default: false
        type: boolean
    working_directory: ~/repo
    steps:
      - checkout
      - when:
          condition: <<parameters.create>>
          steps:
            # need to build the EKS cluster 
            - run: 
                name: Install the eksctl tool
                command: |
                  echo "building eks cluster"
                  if which eksctl > /dev/null; then
                    echo "eksctl is already installed"
                    eksctl version
                  else
                    echo "eksctl needs to be installed"
                    mkdir -p eksctl_download
                    curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                    | tar xz -C eksctl_download
                    chmod +x eksctl_download/eksctl
                    SUDO=""
                    if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                      SUDO="sudo"
                    fi
                    $SUDO mv eksctl_download/eksctl /usr/local/bin/
                    rmdir eksctl_download
                    eksctl version                     
                  fi
            - run: 
                name: Install the kubectl tool
                command: |
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                  kubectl version --client 
            - run: 
                name: Create cluster with eksctl tool
                command: |
                  eksctl create cluster \
                  --name $CLUSTER_STACK_NAME \
                  --region us-east-1 \
                  --version 1.19 \
                  --nodegroup-name capstone-workers \
                  --node-type t2.micro \
                  --nodes 2 \
                  --nodes-min 1 \
                  --nodes-max 3
      - unless:
          condition: <<parameters.create>>
          steps:
            # EKS cluster exists so do nothing 
            - run: echo "skipping the eks cluster creation"
  
  deploy-application: 
    description: deploy kubernetes artefacts
    docker:
      - image: cimg/python:3.10.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install the kubectl tool
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client    
      # install SED so I can replace the image TAG value in the deploymnet yaml with yjos build's circle CI TAG
      - run: 
          name: install stream editor
          command: |
            cd ./yaml
            pwd
            ls -ltr
            sudo apt-get install -y sed
            TAG=0.1.64 #80  #$CIRCLE_BUILD_NUM
            # replace the image TAG in the deployment yaml
            sed -i 's/TAG/'${TAG}'/g' ./deployment.yaml
            cat ./deployment.yaml
      - run:
          name: apply the app deployment yaml
          command: |
            cd ./yaml
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator version
            
            echo "check if eksctl is installed"
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              eksctl version
            else
              echo "eksctl needs to be installed"
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
              eksctl version                     
            fi
            
            eksctl utils write-kubeconfig --cluster=${CLUSTER_STACK_NAME}

            kubectl get nodes -o wide
            kubectl apply -f ./deployment.yaml
            kubectl rollout status deployment/capstone
            kubectl apply -f ./service.yaml
            kubectl get svc -o wide

workflows:
  default:
    jobs:
      - build 
      - createEKScluster: 
          # ONLY set to true for first deployment 
          create: false
          requires: [build]
      - deploy-application:
          requires: [build,createEKScluster]